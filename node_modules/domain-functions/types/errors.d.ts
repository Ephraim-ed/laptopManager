import { Failure } from './composable/types.js';
import type { AtLeastOne, ErrorData, ErrorResult, SchemaError } from './types.js';
/**
 * Creates a SchemaError (used in inputErrors and environmentErrors) from the given message and path.
 * @param message the error message
 * @param path the path to the property that caused the error
 * @returns the SchemaError
 */
declare function schemaError(message: string, path: string): SchemaError;
/**
 * Extracts the error messages for a property from the given ErrorResult.
 * @param errors the ErrorResult['inputErrors'] or ErrorResult['environmentErrors']
 * @param name the name of the property
 * @returns string[] the error messages for the given property
 */
declare function errorMessagesFor(errors: SchemaError[], name: string): string[];
/**
 * A custom error class for input errors.
 * @example
 * const df = mdf()(() => {
 *   throw new InputError('Invalid input', 'user.name')
 * })
 */
declare class InputError extends Error {
    path: string;
    constructor(message: string, path: string);
}
declare class InputErrors extends Error {
    errors: {
        message: string;
        path: string;
    }[];
    constructor(errors: {
        message: string;
        path: string;
    }[]);
}
/**
 * A custom error class for environment errors.
 * @example
 * const df = mdf()(() => {
 *  throw new EnvironmentError('Invalid environment', 'user.name')
 * })
 */
declare class EnvironmentError extends Error {
    path: string;
    constructor(message: string, path: string);
}
/**
 * A custom error class for creating ErrorResult.
 * @example
 * const df = mdf()(() => {
 *   throw new ResultError({
 *     errors: [{ message: 'Some error' }],
 *     inputErrors: [{ message: 'Some input error', path: 'user.name' }],
 *   })
 * })
 */
declare class ResultError extends Error {
    result: ErrorResult;
    constructor(result: AtLeastOne<ErrorData>);
}
declare function errorResultToFailure({ errors, inputErrors, environmentErrors, }: ErrorResult): Failure;
declare function failureToErrorResult({ errors }: Failure): ErrorResult;
export { EnvironmentError, errorMessagesFor, errorResultToFailure, failureToErrorResult, InputError, InputErrors, ResultError, schemaError, };
