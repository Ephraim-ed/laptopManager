/// <reference types="node" />
type QueryStringRecord = {
    [key: string]: undefined | string | string[] | [string, string][] | QueryStringRecord | QueryStringRecord[];
};
type FormDataLike = Iterable<readonly [PropertyKey, unknown]>;
type RequestLike = {
    url: string;
    clone: () => {
        formData: () => Promise<FormDataLike>;
    };
};
/**
 * Parses the given URLSearchParams into an object.
 * @param queryString the URLSearchParams to parse
 * @returns the parsed object
 * @example
 * const parsed = inputFromSearch(new URLSearchParams('a=1&b=2'))
 * //    ^? { a: '1', b: '2' }
 */
declare const inputFromSearch: (queryString: URLSearchParams) => QueryStringRecord;
/**
 * Parses the given FormData into an object.
 * @param formData the FormData to parse
 * @returns the parsed object
 * @example
 * const formData = new FormData()
 * formData.append('a', '1')
 * formData.append('b', '2')
 * const parsed = inputFromFormData(formData)
 * //    ^? { a: '1', b: '2' }
 */
declare const inputFromFormData: (formData: FormDataLike) => QueryStringRecord;
/**
 * Parses the given Request's formData into an object.
 * @param request the Request to parse
 * @returns the parsed object
 * @example
 * const formData = new FormData()
 * formData.append('a', '1')
 * formData.append('b', '2')
 * const request = new Request('https://example.com', {
 *  method: 'POST',
 *  body: formData,
 * })
 * const parsed = await inputFromForm(request)
 * //    ^? { a: '1', b: '2' }
 */
declare const inputFromForm: (request: RequestLike) => Promise<QueryStringRecord>;
/**
 * Parses the given Request URL's queryString into an object.
 * @param request the Request to parse
 * @returns the parsed object
 * @example
 * const request = new Request('https://example.com?a=1&b=2')
 * const parsed = inputFromUrl(request)
 * //    ^? { a: '1', b: '2' }
 */
declare const inputFromUrl: (request: RequestLike) => QueryStringRecord;
export { inputFromForm, inputFromFormData, inputFromSearch, inputFromUrl };
